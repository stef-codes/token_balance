var classy = require('classy')
var Promise = require('bluebird')
var F = require('functionally')

var defineElement = require('./defineElement')

var Create = require('./Create')
var Select = require('./Select')
var Insert = require('./Insert')
var Update = require('./Update')
var Delete = require('./Delete')

module.exports = defineElement('table', {

	mixins: [
		require('./Columnable')
	],

	statics: {
		fromState: function(state){
			var Column  = require('./Column')
			var columns = state.columns.map(Column.fromState)

			new this(state.name, null, columns)
		}
	},

	appendStateProperties: function(props){
	    props.push('metadata')
	},

	init: function(name, metadata, columns){

		this.callSuper()

		this.c = {}

		this.name = this.validate(name || '')
		if (this.name == 'user'){
			this.name = '"user"'
		}

		this.prepareColumns.apply(this, [].slice.call(arguments, 2))
		this.metadata = metadata

	},

	prepareColumns: function(){
		this.columns.forEach(function(col){
			col.setTable(this)
			this.c[col.name] = col
		}, this)
	},

	toString: function(){
		return this.createToString()
	},

	createToString: function () {
		var cmd = 'CREATE TABLE IF NOT EXISTS ' + this.name + ' ('

		cmd += (this.columns || []).map(function(c){
			return c.asCreate()
		}).join(', ')

		return cmd + ');'
	},

	create: function(){
		return Create(this)
	},

	select: function(){
		var columns

		if (!arguments.length){
			columns = (columns || []).slice()
		} else {
			columns = [].slice.call(arguments, 0)
		}

		return Select(columns).from(this)
	},

	delete: function(){
		return Delete(this)
	},

	insert: function(){
		return Insert(this.columns.slice())
	},

	update: function(){
		return Update(this.columns.slice())
	}
})