var defineElement = require('./defineElement')
var Types         = require('./types')
var getType       = require('./types/getType')

var unref = function(obj){
    return JSON.parse(JSON.stringify(obj))
}

var Column = defineElement('column', {

    statics: {
        fromState: function(state){
            var result = new this(state.name, state.type, state.options)

            result.metadata = state.metadata

            return result
        },

        count: function(col){
            var result = col.clone()

            result.name = 'COUNT(' + col.name + ')'

            return result
        }
    },

    appendStateProperties: function(props){
        props.push('type', 'options', 'metadata')
    },

    /**
     * @param {String} name a name for the column
     * @param {Type}
     * @param {Object}  [options]
     * @param {Boolean} [options.primaryKey=false]
     * @param {Boolean} [options.nullable=true]
     */
    init: function(name, type, options){

        this.callSuper()

        this.name = name

        if (type){
            //since type can be a json description
            //we need to do this in order to ensure an instance
            //of the given type
            type = unref(type)
            var TypeClass = getType(type)
            var logger = require('../loggerFactory')()

            logger.info('No Type found for ' + type)

            if (TypeClass){
                this.type = TypeClass.fromState(type)
            }
        }

        this.options  = options || {}
        this.metadata = {}

        return this
    },

    get tableName(){
        return this.metadata.tableName
    },

    setTable: function(table){
        this.metadata.tableName = typeof table == 'string'?
                                    table:
                                    table.name

        return this
    },

    jsonField: function(name){
        var clone = this.clone()

        name = this.validate(name)

        clone.name += '->>\'' + name + '\''

        return clone
    },

    as: function(name){
        var clone = this.clone()

        clone.options.selectAs = name

        return clone
    },

    nextSequence: function(name){
        var clone = this.clone()

        name  = name || this.tableName + '_' + this.name + '_seq'

        clone.name = 'nextval(\'' + name + '\')'
        delete clone.metadata.tableName

        return clone
    },

    count: function(){
        return Column.count(this)
    },

    checkType: function(type){
        if (!this.isValidType(type)){
            console.error('Unknown column type ' + type + '!')
        }
    },

    isValidType: function(type){
        type = type || this.type

        var k
        var Type

        for (k in Types){
            Type = Types[k]

            if (type === Type || (type instanceof Type)){
                return true
            }
        }

        return false
    },

    asCreate: function(){
        var result = this.name + ' ' + this.type.toString()

        if (this.options.primaryKey){
            result += ' PRIMARY KEY'
        }

        if (this.options.unique){
            result += ' UNIQUE'
        }

        if (this.options.notNull){
            result += ' NOT NULL'
        }

        if (this.options['default']){
            result += ' DEFAULT ' + this.options['default']
        }

        return result
    }
})

module.exports = Column