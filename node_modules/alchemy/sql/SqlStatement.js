'use strict'

var jsesc = require('jsesc')
var classy = require('classy')
var Promise = require('bluebird')
var getEngine = require('../defaultEngine')


var SqlStatement = classy.define({

	extend: require('./SqlBase'),
	alias : 'sql.Statement',

	stateProperties: [
		'name',
		'parameterized'
	],

	parameterized: true,

	initState: function(){
		this.callSuper()
		this.state.name = this.name
	},

	isParameterized: function(){
		return !!this.parameterized
	},

	isPrepared: function(){
		return this.isParameterized() && this.name
	},

	getParams: function(){
		return []
	},

	valueToSql: function(str){
		var result = str

		if (this && this.isParameterized && !this.isParameterized() && typeof str == 'string'){
			result = "'" + jsesc(str) + "'"
		}

		if (str instanceof SqlStatement){
			str = '(' + str + ')'
		}

		if (result == null){
			result = 'null'
		}

		return result
	},

	transact: function(){
		return this.execute({
			transaction: true
		})
	},

	execute: function(config){

		var transaction = (config && config.transaction) || this.transactional

		return new Promise(function(resolve, reject){

			var engine = getEngine()
			var exec   = (transaction? engine.transaction: engine.query).bind(engine)

			exec(this, function(err, result){
				err?
					reject(err):
					resolve(result)
			})
		}.bind(this))
	}
})

module.exports = SqlStatement