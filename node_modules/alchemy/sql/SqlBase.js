'use strict'

var classy   = require('classy')

var copy     = require('../copy')
var validate = require('../validate')

function unique(arr){
    var result = []

    arr.forEach(function(value){
        if (result.indexOf(value) == -1){
            result.push(value)
        }
    })

    return result
}

module.exports = classy.define({

    alias: 'sql.Base',

    forceInstance: true,

    stateProperties: [
    ],

    statics: {
        fromState: function(state){

        }
    },

    init: function(){
        this.initState()
        this.prepareStateProperties()
    },

    initState: function(){
        this.state = this.state?
                        copy(this.state):
                        {}
    },

    initStateProperties: function(){

        var props = this.stateProperties

        props = this.stateProperties = unique(props)

        props.forEach(function(name){
            Object.defineProperty(this, name, {
                get: function(){
                    return this.state[name]
                },
                set: function(value){
                    this.state[name] = value
                }
            })
        }, this)
    },

    appendStateProperties: function(props) {
    },

    prepareStateProperties: function(){

        this.stateProperties = (this.stateProperties || []).concat()
        this.appendStateProperties(this.stateProperties)
        this.initStateProperties()
    },

    copy: function(obj){
        copy(obj, this)

        return this
    },

    setState: function(state){
        this.state = state
    },

    validate: function(name){
        return validate(name)
    },

    clone: function(){
        return this.$ownClass.fromState(this.toState())
    },

    getEmptyState: function(){
        return {
            alias: this.alias
        }
    },

    toState: function(){
        return copy(this.cloneState(), this.getEmptyState())
    },

    cloneState: function(){
        return this.toJSON()
    },

    toJSON: function(){
        return JSON.parse(JSON.stringify(this.state))
    },

    set: function(name, value){
        arguments.length == 1?
            copy(obj, this.state):
            this.state[name] = value

        return this
    },

    get: function(name){
        if (typeof name != 'string'){
            return Object.keys(name).map(this.get, this)
        }

        return this.state[name]
    },

    toString: function(){

    },

    valueOf: function(){
        return this.toString()
    }

})