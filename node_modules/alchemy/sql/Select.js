'use strict'

var F               = require('functionally')
var defineStatement = require('./defineStatement')

var map = F.map
var dot = F.dot
var compose = F.compose

module.exports = defineStatement('select', {

	mixins: [
		require('./Columnable')
	],

	statics: {
		fromState: function(state){
			var inst = new this(state.columns)

			inst.copy(state)
			inst.state = state

			return inst
		}
	},

	appendStateProperties: function(props){
	    props.push('selectLimit', 'selectOffset', 'selectExists', 'whereConditions')
	},

	init: function(columns){
		this.callSuper()
		this.prepareColumns.apply(this, arguments)
	},

	setColumns: function(){
		this.prepareColumns.apply(this, arguments)

		return this
	},

	addColumn: function(column){
		this.columns.push(column)

		return this
	},

	limit: function(limit){
		if (limit * 1 == limit){
			this.selectLimit = limit
		}

		return this
	},

	offset: function(offset){
		if (offset * 1 == offset){
			this.selectOffset = offset
		}

		return this
	},

	/**
	 * Tell the select to return the given page. Pages starting from 1.
	 *
	 * @param  {Number/String} page
	 * @return {Select}
	 */
	page: function(page){
		if (page * 1 == page){
			this.selectPage = page
		}

		return this
	},

	pageSize: function(size){
		return this.limit(size)
	},

	toString: function(){
		return this.valueOf({
			parameterized: false
		})
	},

	limitToString: function() {
		var limit = this.selectLimit? ' LIMIT ' + this.selectLimit: ''

		return limit
	},

	offsetToString: function(){
		if (this.selectPage && this.selectLimit){
			this.selectOffset = (this.selectPage - 1) * this.selectLimit
		}

		var offset = this.selectOffset? ' OFFSET ' + this.selectOffset: ''

		return offset
	},

	prepareColumns: function(){
		//columns are already set

		var from = this.state.from

		if (!from){
			this.columns.some(function(c){
				if (c.tableName){
					this.state.from = c.tableName
					return true
				}
			}, this)
		}
	},

	valueOf: function(config){
		if (this.selectExists){
			return 'SELECT EXISTS(' + this.selectExists + ')'
		}

		var from   = this.fromToString()
		var cols   = this.columnsToString()
		var where  = this.whereToString(config)
		var limit  = this.limitToString()
		var offset = this.offsetToString()

		return 'SELECT ' + cols + from + where + limit + offset
	},

	from: function(table){
		this.state.from = typeof table == 'string'?
						table:
						table.name

		return this
	},

	fromToString: function() {
		var from = this.state.from

		if (!from){
			this.columns.some(function(c){
				if (c.tableName){
					from = c.tableName
					return true
				}
			})
		}

		return from?
				' FROM ' + from:
				''
	},

	columnsToString: function(){
		if (!this.columns || this.columns.length == 0){
			return '*'
		}
		return this.columns.map(function(col){
			if (typeof col == 'string'){
				return col
			}

			var name = col.name

			if (col.options && col.options.selectAs){
				name += ' AS ' + col.options.selectAs
			}

			return name
		}).join(', ')
	},

	whereToString: require('./whereToString'),

	getParams: function(){
		return this.whereConditions.map(compose(this.valueToSql, dot(2)))
	},

	exists: function(){
		var clone = this.clone()

		clone.selectExists = this

		return clone
	},

	where: require('./where')
})