module.exports = require('./defineStatement')('insert', {

	mixins: [
		require('./Columnable')
	],

	init: function(){
		this.callSuper()
		this.prepareColumns.apply(this, arguments)
	},

	toString: function(){
		var into   = this.targetToString()
		var cols   = this.columnsToString()
		var values = this.valuesToString()

		return 'INSERT INTO ' + into + ' ' + cols + ' VALUES ' + values + ';'
	},

	getInsertColumns: function(){
		var cols = []

		this.values.forEach(function(values){
			Object.keys(values).forEach(function(k){
				if (!~cols.indexOf(k)){
					cols.push(k)
				}
			})
		})

		return cols
	},

	valuesToString: function(){
		var cols = this.getInsertColumns()

		return this.values.map(function(values){

			var result = cols.map(function(colName){
				return this.valueToSql(values[colName])
			}, this)

			return '(' + result.join(', ') + ')'
		}, this).join(', ')
	},

	columnsToString: function(){
		return '(' + this.getInsertColumns().join(', ') + ')'
	},

	targetToString: function() {
		var into = this.intoTarget

		if (!into){
			this.columns.some(function(c){
				if (c.tableName){
					into = c.tableName
					return true
				}
			})
		}

		return into
	},

	values: function(values){
		this.values = Array.isArray(values)?
							values:
							[values]

		var cols = {}
		this.columns.forEach(function(col){
			cols[col.name] = 1
		})

		this.values = this.values.map(function(values){
			var validValues = {}
			var count = 0

			Object.keys(values).forEach(function(k){
				if (k in cols){
					validValues[k] = values[k]
					count++
				}
			})

			return count? validValues: null
		})

		this.values = this.values.filter(function(v){
			return !!v
		})

		return this
	}
})