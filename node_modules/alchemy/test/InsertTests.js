var Insert = require('../Insert')
var Types  = require('../Types')
var Table  = require('../Table')
var Column = require('../Column')

describe('Insert', function(){

	var table = Table('users', null,
			Column('name', Types.String),
			Column('id', Types.String),
			Column('color', Types.String)
		)

	it('should have a name', function(){
		var insert = table.insert()

		insert.name
			.should.equal('insert')
	})

	it('should have proper state', function(){
		var insert = table.insert()
						.set('parameterized', false)

		var state = insert.toState()

		state.name
			.should.equal('insert')
		state.parameterized
			.should.equal(false)

		state.columns[0].name
			.should.equal('name')
		state.columns[1].name
			.should.equal('id')
		state.columns.length
			.should.equal(3)
	})

	it('should insert name and id correctly', function(){

		var insert = table.insert()
						.set('parameterized', false)
						.values({
							name: 'x',
							id: 1
						})

		insert
			.toString()
			.should.equal(
				"INSERT INTO users (name, id) VALUES ('x', 1);"
			)

	})

	it('should insert null values correctly', function(){
		table.insert()
			.values({
				name: null,
				id: 1
			})
			.toString()
			.should.equal(
				"INSERT INTO users (name, id) VALUES (null, 1);"
			)
	})

	it('should insert multiple values correctly', function(){
		var insert = table.insert().values([{
			name: 'x',
			id: 1,
			color: 'red'
		}, {
			name: 'b',
			id: 2
		}])

		insert
			.set('parameterized', false)
			.toString()
			.should.equal(
				"INSERT INTO users (name, id, color) VALUES ('x', 1, 'red'), ('b', 2, null);"
			)
	})
})