var Select = require('../Select')
var Types  = require('../Types')
var Table  = require('../Table')
var Column = require('../Column')

describe('Select', function(){

	var table = Table('users', null,
			Column('name', Types.String),
			Column('id', Types.String),
			Column('color', Types.String)
		)

	it('should select name and id correctly', function(){

		var name = table.c.name
		var idCol = table.c.id

		Select(name, idCol)
			.set('parameterized', false)
			.toString()
			.should.equal('SELECT name, id FROM users')

	})

	it('should select all', function(){
		table.select()
			.toString()
			.should.equal('SELECT * FROM users')
	})

	it('should select name where correctly', function(){

		var name = table.c.name
		var idCol = table.c.id

		Select(name)
			.set('parameterized', false)
			.where(name)
				.equals('test')
			.and(idCol)
				.lt(1)
			.toString()
			.should.equal("SELECT name FROM users WHERE name = 'test' AND id < 1")

	})

	it('should paginate correctly', function(){

		var name = table.c.name
		var idCol = table.c.id

		Select(name)
			.set('parameterized', false)
			.limit(5)
			.page(3)
			.toString()
			.should.equal("SELECT name FROM users LIMIT 5 OFFSET 10")
	})

	it('should select count column', function(){
		var name = table.c.name
		var idCol = table.c.id

		Select(name.count().as('x'))
			.toString()
			.should.equal("SELECT COUNT(name) AS x FROM users")
	})

	it('should select function call', function(){
		Select('uuid_generate_v4()')
			.toString()
			.should.equal("SELECT uuid_generate_v4()")
	})

	it('should select function call', function(){
		Select(Column('uuid_generate_v4()').as('uuid'))
			.toString()
			.should.equal("SELECT uuid_generate_v4() AS uuid")
	})

})

describe('Select clone', function(){

	var table = Table('users', null,
			Column('name', Types.String),
			Column('id', Types.String),
			Column('color', Types.String)
		)

	it('should result in same toString', function(){

		var name = table.c.name
		var idCol = table.c.id

		var toString = 'SELECT name, id FROM users'

		var select = Select(name, idCol)
			.set('parameterized', false)

		select
			.toString()
			.should
			.equal(toString)

		var clone = select
						.clone()

		clone.toString()
			.should.equal(toString)
	})

	it('should clone where', function(){

		var name = table.c.name
		var idCol = table.c.id

		var toString = 'SELECT name, id FROM users WHERE id = 2'

		var select = Select(name, idCol)
			.set('parameterized', false)
			.where(idCol).is(2).end()

		var clone = select.clone()

		clone.toString()
			.should.equal(toString)
	})
})