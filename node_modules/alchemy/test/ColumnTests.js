var Column = require('../Column')
var Types  = require('../Types')

describe('Column', function(){

	it('should have name set', function(){
		var col = Column('firstName', Types.String)

		col.name
			.should.equal('firstName')

		col.state.name
			.should
			.equal(col.name)

		col.state.name
			.should.equal('firstName')

	})

	it('should return state correctly', function(){
		var col = Column('firstName', Types.String(35), { primaryKey: true})

		var state = col.toState()

		state.type.type
			.should
			.equal('string')

		state.type.value
			.should
			.equal('varchar(35)')

		state.name
			.should
			.equal('firstName')

		state.options.primaryKey
			.should
			.equal(true)
	})

	it('should return valid column from fromState', function(){
		var col1 = Column('lastName', Types.String(35), { primaryKey: true})

		var col2 = Column.fromState(col1.toState())

		JSON.stringify(col1.toState())
			.should
			.equal(
				JSON.stringify(col2.toState())
			)
	})

	it('should validate type correctly', function(){
		Column('name', Types.String)
			.isValidType()
			.should.equal(true)

		new Column('name', Types.String)
			.isValidType()
			.should.equal(true)

		Column('name', Types.String(50))
			.isValidType()
			.should.equal(true)

		Column('name', Types.XXX)
			.isValidType()
			.should.equal(false)
	})

	it('should be instantiated correctly', function(){
		var bool = Column('name') instanceof Column
		bool.should.equal(true)

		bool = new Column('name') instanceof Column
		bool.should.equal(true)
	})
})