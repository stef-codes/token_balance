var F = require('functionally')
var getType = require('./sql/types/getType')

module.exports = function(connString){

	var engine = require('./engine')(connString)

	require('./defaultEngine')(engine)

	var SETTERS = {
		'sql.logfile': function(value){
			require('./config/app').logger.sql = value
		},
		'main.logfile': function(value){
			require('./config/app').logger.main = value
			ensureLogger()
		}
	}

	var logger
	var info
	var error

	function ensureLogger(){
		if (!logger){
			logger = require('./loggerFactory')('main')
			info = logger.info
			error = logger.error
		}
	}

	return F.bindFunctionsOf({

		set: function(key, value){
			if (key in SETTERS){
				SETTERS[key](value)
			}
			if (logger){
				info('Set "' + key + '" to value ' + value + '.')
			}

			return this
		},

		getType: getType,

		execute: function(query, callback){
			return engine.query.apply(engine, arguments)
		},

		executeTransaction: function(query, callback){
			return engine.transaction.apply(engine, arguments)
		},

		engine: engine
	})
}